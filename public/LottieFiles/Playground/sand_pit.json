{"v":"5.7.11","fr":25,"ip":0,"op":141,"w":350,"h":350,"nm":"Comp 9","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Glitter 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[249.885,162.339,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[32,32,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Rotation Speed","np":3,"mn":"ADBE Angle Control","ix":1,"en":1,"ef":[{"ty":0,"nm":"Angle","mn":"ADBE Angle Control-0001","ix":1,"v":{"a":0,"k":0,"ix":1}}]}],"shapes":[{"ty":"gr","it":[{"ty":"sr","sy":1,"d":1,"pt":{"a":0,"k":4,"ix":3},"p":{"a":0,"k":[0,0],"ix":4},"r":{"a":0,"k":0,"ix":5},"ir":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.167],"y":[0.167]},"t":101,"s":[15]},{"t":121.0205078125,"s":[10]}],"ix":6},"is":{"a":0,"k":234,"ix":8},"or":{"a":1,"k":[{"i":{"x":[0.833],"y":[0.833]},"o":{"x":[0.52],"y":[0]},"t":101,"s":[33]},{"t":121.0205078125,"s":[200]}],"ix":7},"os":{"a":0,"k":0,"ix":9},"ix":1,"nm":"Polystar Path 1","mn":"ADBE Vector Shape - Star","hd":false},{"ty":"fl","c":{"a":0,"k":[1,1,1,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1 - AC Color 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.51,0.51],"y":[1,1]},"o":{"x":[0.49,0.49],"y":[0,0]},"t":101,"s":[0,0]},{"i":{"x":[0.51,0.51],"y":[1,1]},"o":{"x":[0.49,0.49],"y":[0,0]},"t":106.005,"s":[100,100]},{"t":121.8544921875,"s":[0,0]}],"ix":3},"r":{"a":0,"k":0,"ix":6,"x":"var $bm_rt;\n$bm_rt = $bm_sum(value, $bm_mul(time, effect('Rotation Speed')('ADBE Angle Control-0001')));"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Polystar 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":101,"op":141,"st":101,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"Layer 2","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":101,"s":[100]},{"t":106,"s":[0]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[88.546,235.801,0],"ix":2,"l":2},"a":{"a":0,"k":[-86.454,60.801,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.017,0.74],[5.654,-2.24],[0.18,-1.139],[-4.611,-0.22],[0.023,3.591]],"o":[[-0.608,-0.223],[-4.157,1.647],[-0.382,2.423],[4.443,0.212],[-0.015,-2.374]],"v":[[-89.629,58.567],[-97.202,60.224],[-103.621,63.858],[-94.915,70.548],[-85.308,63.858]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.760784313725,0.470588235294,0.309803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":70.93,"s":[-62.273,-31.713],"to":[-7.784,0.384],"ti":[5.286,-15.953]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":75.465,"s":[-108.979,-29.407],"to":[-5.286,15.953],"ti":[-2.499,-15.568]},{"t":80,"s":[-93.987,64.003]}],"ix":2},"a":{"a":0,"k":[-93.987,64.003],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":70.93,"s":[-92]},{"t":80,"s":[0]}],"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.295,1.134],[9.236,-3.432],[0.293,-1.745],[-7.532,-0.337],[0.037,5.5]],"o":[[-0.993,-0.342],[-6.792,2.523],[-0.624,3.711],[7.258,0.325],[-0.024,-3.636]],"v":[[-76.324,51.301],[-88.696,53.84],[-99.183,59.405],[-84.959,69.653],[-69.263,59.405]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.760784313725,0.470588235294,0.309803921569,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":55,"s":[-59.39,-34.02],"to":[-9.898,-1.442],"ti":[3.94,-15.761]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":59.535,"s":[-118.781,-42.669],"to":[-3.94,15.761],"ti":[-5.958,-17.202]},{"t":64.0703125,"s":[-83.031,60.544]}],"ix":2},"a":{"a":0,"k":[-83.031,60.544],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":55,"s":[79]},{"t":64.0703125,"s":[0]}],"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":143.311644978312,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"Layer 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[175,269.801,0],"ix":2,"l":2},"a":{"a":0,"k":[0,94.801,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Kleaner","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":1,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]},{"ty":5,"nm":"≈ùlosilo pli pura","np":34,"mn":"Pseudo/Duik Kleaner v3.2","ix":2,"en":1,"ef":[{"ty":7,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0001","ix":1,"v":{"a":0,"k":0,"ix":1}},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0002","ix":2,"v":{"a":0,"k":0,"ix":2}},{"ty":7,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0003","ix":3,"v":{"a":0,"k":1,"ix":3}},{"ty":6,"nm":"Anticipation","mn":"Pseudo/Duik Kleaner v3.2-0004","ix":4,"v":0},{"ty":0,"nm":"Duration (s)","mn":"Pseudo/Duik Kleaner v3.2-0005","ix":5,"v":{"a":0,"k":0.3,"ix":5}},{"ty":0,"nm":"Amplitude","mn":"Pseudo/Duik Kleaner v3.2-0006","ix":6,"v":{"a":0,"k":50,"ix":6}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0007","ix":7,"v":0},{"ty":6,"nm":"Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0008","ix":8,"v":0},{"ty":0,"nm":"Slow In","mn":"Pseudo/Duik Kleaner v3.2-0009","ix":9,"v":{"a":0,"k":60,"ix":9}},{"ty":0,"nm":"Slow Out","mn":"Pseudo/Duik Kleaner v3.2-0010","ix":10,"v":{"a":0,"k":25,"ix":10}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0011","ix":11,"v":0},{"ty":6,"nm":"Follow Through","mn":"Pseudo/Duik Kleaner v3.2-0012","ix":12,"v":0},{"ty":0,"nm":"Elasticity","mn":"Pseudo/Duik Kleaner v3.2-0013","ix":13,"v":{"a":0,"k":10,"ix":13}},{"ty":0,"nm":"Elasticity random","mn":"Pseudo/Duik Kleaner v3.2-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Damping","mn":"Pseudo/Duik Kleaner v3.2-0015","ix":15,"v":{"a":0,"k":50,"ix":15}},{"ty":0,"nm":"Damping random","mn":"Pseudo/Duik Kleaner v3.2-0016","ix":16,"v":{"a":0,"k":0,"ix":16}},{"ty":7,"nm":"Bounce","mn":"Pseudo/Duik Kleaner v3.2-0017","ix":17,"v":{"a":0,"k":0,"ix":17}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0018","ix":18,"v":0},{"ty":6,"nm":"Spatial Options","mn":"Pseudo/Duik Kleaner v3.2-0019","ix":19,"v":0},{"ty":7,"nm":"Smart Interpolation","mn":"Pseudo/Duik Kleaner v3.2-0020","ix":20,"v":{"a":0,"k":0,"ix":20}},{"ty":7,"nm":"Mode","mn":"Pseudo/Duik Kleaner v3.2-0021","ix":21,"v":{"a":0,"k":1,"ix":21}},{"ty":6,"nm":"Overlap (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0022","ix":22,"v":0},{"ty":7,"nm":"Overlap","mn":"Pseudo/Duik Kleaner v3.2-0023","ix":23,"v":{"a":0,"k":1,"ix":23}},{"ty":0,"nm":"Delay (s)","mn":"Pseudo/Duik Kleaner v3.2-0024","ix":24,"v":{"a":0,"k":0.05,"ix":24}},{"ty":0,"nm":"Overlap random","mn":"Pseudo/Duik Kleaner v3.2-0025","ix":25,"v":{"a":0,"k":0,"ix":25}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0026","ix":26,"v":0},{"ty":6,"nm":"Soft Body (simulation)","mn":"Pseudo/Duik Kleaner v3.2-0027","ix":27,"v":0},{"ty":7,"nm":"Soft Body","mn":"Pseudo/Duik Kleaner v3.2-0028","ix":28,"v":{"a":0,"k":1,"ix":28}},{"ty":0,"nm":"Soft-Body Flexibility","mn":"Pseudo/Duik Kleaner v3.2-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0030","ix":30,"v":0},{"ty":6,"nm":"","mn":"Pseudo/Duik Kleaner v3.2-0031","ix":31,"v":0},{"ty":0,"nm":"Precision","mn":"Pseudo/Duik Kleaner v3.2-0032","ix":32,"v":{"a":0,"k":1,"ix":32}}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.155,-3.241],[0,0],[0,-0.794],[1.827,-2.605],[0.124,-0.127],[0,0],[0.031,-0.032],[0.31,-0.222],[2.694,-0.476],[2.912,-0.508],[5.575,-0.794],[0.836,-0.127],[12.853,-0.54],[25.521,3.686],[0.836,0.127],[5.296,1.017],[3.376,3.399],[0.032,0.032],[0.247,0.413],[-0.186,3.273],[0,0],[-0.032,0.445],[-0.805,2.637],[0,0],[0,0.032],[-0.279,0.318],[-0.093,0.064],[-2.261,-0.445],[-6.411,-0.953],[-12.575,-0.953],[-23.91,2.161],[-12.048,2.224],[-3.004,0.635],[-0.836,0],[-1.053,-1.239]],"o":[[0,0],[-0.062,0.858],[0,3.018],[-0.093,0.159],[0,0.032],[-0.031,0.032],[-0.248,0.286],[-2.044,1.652],[-2.973,0.572],[-5.575,1.048],[-0.836,0.127],[-12.73,1.779],[-25.707,1.112],[-0.836,-0.127],[-5.327,-0.826],[-4.181,-0.763],[-0.03,-0.032],[-0.34,-0.318],[-1.766,-2.764],[0,0],[0.03,-0.508],[0.092,-2.669],[0,0],[0,-0.032],[0.185,-0.635],[0.093,-0.127],[1.177,-1.207],[6.411,1.207],[12.482,1.906],[23.941,1.811],[12.203,-1.112],[3.035,-0.604],[1.115,-0.222],[1.084,-0.064],[2.076,2.542]],"v":[[94.399,-14.501],[94.399,-14.215],[94.306,-11.736],[92.975,-2.999],[92.634,-2.554],[92.634,-2.523],[92.572,-2.459],[91.766,-1.696],[84.333,0.4],[75.506,1.957],[58.782,4.722],[56.273,5.071],[17.837,8.566],[-59.191,4.626],[-61.699,4.245],[-77.681,1.513],[-91.897,-2.808],[-91.959,-2.872],[-92.919,-4.016],[-94.374,-13.707],[-94.374,-13.929],[-94.312,-15.39],[-93.786,-23.461],[-93.786,-23.492],[-93.755,-23.588],[-93.074,-25.018],[-92.826,-25.303],[-87.716,-25.24],[-68.482,-21.967],[-30.882,-17.615],[41.097,-17.964],[77.52,-22.984],[86.594,-24.795],[89.505,-25.335],[92.603,-23.81]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.952941179276,0.250980407,0.211764708161,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-58.058,17.889]],"o":[[55.801,17.468],[0,0]],"v":[[-84.242,17.831],[86.507,17.831]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.937254905701,0.623529434204,0.152941182256,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3.074,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-55.529,17.889]],"o":[[53.37,17.468],[0,0]],"v":[[-80.038,40.629],[83.273,40.629]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.937254905701,0.623529434204,0.152941182256,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3.074,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.093,-2.478],[0.031,-0.588],[0,0],[0.371,-2.509],[0.093,-0.681],[0,0],[0.093,-0.527],[0,0],[1.363,-8.92],[0.124,-0.929],[13.504,0.248],[12.729,1.332],[21.99,5.823],[9.601,3.004],[0.248,1.115],[0,0],[0,0],[0,0],[-0.031,0.434],[-0.774,2.509],[0,0],[0,0.031],[-0.279,0.31],[-1.642,-0.681],[-0.898,-0.341],[-4.584,-1.611],[-40.914,11.46],[-9.787,3.655],[-1.673,0.65],[0,0],[-0.588,0.248],[-0.093,-0.031]],"o":[[0,0.588],[0,0],[-0.402,2.509],[-0.124,0.681],[0,0],[-0.093,0.526],[0,0.031],[-1.363,8.951],[-0.124,0.898],[-13.287,2.261],[-12.791,-0.248],[-22.641,-2.416],[-9.756,-2.602],[-0.279,-1.115],[0,0],[0,0],[0,0],[0.031,-0.496],[0.093,-2.571],[0,0],[0,-0.031],[0.185,-0.619],[1.673,0.774],[0.898,0.465],[4.522,1.92],[40.573,14.092],[10.128,-2.323],[1.673,-0.619],[0,0],[0.588,-0.217],[0.094,0.031],[1.487,1.92]],"v":[[92.634,-15.923],[92.603,-14.127],[92.603,-13.848],[91.457,-6.291],[91.147,-4.278],[91.116,-4.247],[90.868,-2.698],[90.868,-2.667],[86.749,24.123],[86.346,26.849],[45.99,29.203],[7.678,26.818],[-59.377,14.46],[-88.273,5.633],[-89.078,2.288],[-90.255,-2.915],[-91.185,-7.034],[-92.671,-13.569],[-92.609,-14.963],[-92.113,-22.675],[-92.113,-22.706],[-92.082,-22.799],[-91.401,-24.193],[-86.446,-21.994],[-83.751,-20.817],[-70.155,-15.552],[54.043,-11.37],[83.961,-20.321],[88.979,-22.241],[89.01,-22.241],[90.713,-22.954],[90.992,-22.83]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.972549021244,0.780392169952,0.23137255013,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.333,-0.311],[-0.486,0.772],[0.1,0.733],[0.654,0.793],[0.666,-2.369]],"o":[[0.904,0.121],[0.394,-0.626],[-0.139,-1.018],[-1.241,-1.506],[-0.653,2.322]],"v":[[-35.74,42.774],[-33.332,41.821],[-33.06,39.665],[-34.133,36.817],[-39.523,37.117]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.972549021244,0.780392169952,0.23137255013,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-3.934,-0.524],[-0.819,1.302],[0.169,1.236],[1.102,1.337],[1.123,-3.994]],"o":[[1.525,0.203],[0.665,-1.056],[-0.234,-1.717],[-2.093,-2.538],[-1.101,3.915]],"v":[[-14.435,47.753],[-10.374,46.148],[-9.916,42.512],[-11.726,37.712],[-20.811,38.218]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.972549021244,0.780392169952,0.23137255013,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.093,-2.478],[0.031,-0.588],[0,0],[0.371,-2.509],[0.093,-0.681],[0,0],[0.093,-0.527],[0,0],[1.363,-8.92],[0.124,-0.929],[1.332,-5.141],[1.239,-2.633],[2.417,-2.385],[0,0],[0.898,-0.743],[0.062,-0.062],[2.168,-1.115],[1.177,-0.495],[2.199,-0.619],[0.898,-0.217],[0.155,-0.031],[2.013,-0.341],[3.159,-0.495],[17.53,0.774],[13.411,6.659],[0.371,0.186],[0.96,0.557],[0.465,0.31],[0.092,0.031],[0.464,0.341],[0.991,0.991],[0,0],[0.031,0.031],[0.557,0.681],[0,0.031],[0.341,0.496],[0.217,0.372],[0.186,0.341],[1.549,6.69],[1.642,7.217],[0.402,1.703],[0.309,1.394],[0.248,1.115],[0,0],[0,0],[0,0],[-0.031,0.434],[-0.774,2.509],[0,0],[0,0.031],[-0.279,0.31],[-1.642,-0.681],[-0.898,-0.341],[-4.584,-1.611],[-40.914,11.46],[-9.787,3.655],[-1.673,0.65],[0,0],[-0.588,0.248],[-0.03,0.031],[-0.062,-0.062]],"o":[[0,0.588],[0,0],[-0.402,2.509],[-0.124,0.681],[0,0],[-0.093,0.526],[0,0.031],[-1.363,8.951],[-0.124,0.898],[-0.774,5.234],[-0.743,2.973],[-1.642,3.438],[0,0],[-0.836,0.867],[-0.062,0.062],[-1.92,1.518],[-1.115,0.588],[-2.107,0.867],[-0.867,0.248],[-0.155,0.062],[-2.044,0.495],[-3.5,0.681],[-17.593,2.85],[-14.309,-0.65],[-0.402,-0.186],[-0.96,-0.495],[-0.495,-0.279],[-0.093,-0.062],[-0.496,-0.341],[-1.177,-0.867],[0,0],[-0.032,-0.031],[-0.619,-0.65],[0,0],[-0.371,-0.434],[-0.278,-0.372],[-0.216,-0.31],[-3.004,-4.739],[-1.642,-7.247],[-0.402,-1.703],[-0.279,-1.394],[-0.279,-1.115],[0,0],[0,0],[0,0],[0.031,-0.496],[0.093,-2.571],[0,0],[0,-0.031],[0.185,-0.619],[1.673,0.774],[0.898,0.465],[4.522,1.92],[40.573,14.092],[10.128,-2.323],[1.673,-0.619],[0,0],[0.588,-0.217],[0.032,-0.031],[0.062,0.062],[1.487,1.92]],"v":[[92.634,-15.923],[92.603,-14.127],[92.603,-13.848],[91.457,-6.291],[91.147,-4.278],[91.116,-4.247],[90.868,-2.698],[90.868,-2.667],[86.749,24.123],[86.346,26.849],[83.528,42.738],[80.586,51.162],[74.453,59.865],[74.453,59.896],[71.821,62.281],[71.604,62.467],[65.471,66.4],[62.034,68.01],[55.529,70.241],[52.866,70.922],[52.432,71.046],[46.362,72.316],[36.296,73.988],[-16.883,76.187],[-59.222,67.081],[-60.367,66.493],[-63.248,64.913],[-64.704,64.015],[-64.951,63.86],[-66.376,62.838],[-69.659,60.02],[-70.309,59.369],[-70.402,59.276],[-72.168,57.263],[-72.199,57.232],[-73.283,55.839],[-74.026,54.724],[-74.646,53.732],[-81.242,36.636],[-86.167,14.956],[-87.344,9.845],[-88.273,5.633],[-89.078,2.288],[-90.255,-2.915],[-91.185,-7.034],[-92.671,-13.569],[-92.609,-14.963],[-92.113,-22.675],[-92.113,-22.706],[-92.082,-22.799],[-91.401,-24.193],[-86.446,-21.994],[-83.751,-20.817],[-70.155,-15.552],[54.043,-11.37],[83.961,-20.321],[88.979,-22.241],[89.01,-22.241],[90.713,-22.954],[90.837,-23.016],[90.992,-22.83]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.992156863213,0.905882358551,0.478431373835,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":6,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-2.478,3.097],[2.54,-1.703],[1.27,-0.124],[1.704,0.991],[0.062,0.031],[4.151,3.778],[0.527,2.323],[0.031,0.124],[-0.185,0.774],[-0.155,0.465],[-3.004,-2.973],[-5.265,-0.093]],"o":[[-0.619,3.035],[-1.208,0.805],[-1.889,0.248],[-0.062,-0.031],[-4.924,-2.788],[-1.765,-1.611],[-0.031,-0.155],[-0.092,-0.836],[0.062,-0.495],[2.199,3.624],[3.716,3.655],[4.026,0.093]],"v":[[48.602,-79.696],[43.926,-72.015],[40.147,-70.59],[34.634,-71.705],[34.448,-71.798],[20.759,-81.678],[16.082,-87.253],[15.989,-87.718],[16.144,-90.103],[16.485,-91.558],[24.073,-81.43],[37.948,-74.895]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.882352948189,0.101960785687,0.090196080506,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.261,-2.086],[1.64,-1.139],[0.741,-0.087],[0.982,0.566],[2.383,2.21],[0.159,1.493],[-0.102,0.43],[-0.649,0.778],[-1.601,0.48],[-2.384,-0.731],[-1.002,-1.955]],"o":[[-0.261,1.991],[-0.667,0.463],[-1.059,0.155],[-2.824,-1.622],[-1.045,-0.987],[-0.053,-0.466],[0.147,-1.015],[1.101,-1.315],[2.445,-0.711],[2.081,0.635],[0.935,1.844]],"v":[[41.83,-83.276],[39.036,-78.138],[36.888,-77.309],[33.757,-77.929],[25.917,-83.695],[23.234,-87.193],[23.324,-88.556],[24.596,-91.286],[28.842,-93.91],[36.051,-93.734],[40.8,-89.342]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.673,3.221],[0.743,0.898],[2.602,0.805],[4.274,-1.208],[1.921,-2.23],[0.278,-0.372],[0.248,-0.743],[0.062,-0.495],[-0.092,-0.836],[-0.031,-0.155],[-1.765,-1.611],[-4.924,-2.788],[-0.062,-0.031],[-1.889,0.248],[-1.208,0.805],[-0.619,3.035],[-0.062,0.372]],"o":[[-0.526,-0.991],[-1.704,-2.168],[-4.181,-1.27],[-2.819,0.805],[-0.278,0.341],[-0.434,0.681],[-0.155,0.465],[-0.185,0.774],[0.031,0.124],[0.527,2.323],[4.151,3.779],[0.062,0.031],[1.704,0.991],[1.27,-0.124],[2.54,-1.703],[0.062,-0.372],[0.433,-3.593]],"v":[[46.899,-91.28],[45.01,-94.129],[38.475,-98.868],[25.808,-99.239],[18.343,-94.779],[17.507,-93.695],[16.485,-91.558],[16.144,-90.103],[15.989,-87.718],[16.082,-87.253],[20.759,-81.678],[34.448,-71.798],[34.634,-71.705],[40.147,-70.59],[43.926,-72.015],[48.602,-79.696],[48.788,-80.811]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.960784316063,0.388235300779,0.341176480055,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.616,-1.044],[1.533,-1.974],[1.286,-1.623],[6.929,-9.022],[1.247,-1.632],[-1.722,2.258],[-3.519,10.035],[-0.125,3.824],[0,0],[-0.087,0.021],[-1.551,-0.203],[-0.476,-1.63]],"o":[[-1.202,2.136],[-1.247,1.633],[-6.929,9.023],[-1.247,1.633],[1.138,-2.56],[6.472,-8.475],[1.26,-3.597],[0,0],[0.096,-0.059],[1.433,-0.686],[1.668,0.23],[0.335,1.185]],"v":[[30.518,-74.999],[25.568,-69.321],[21.78,-64.394],[1.001,-37.364],[-2.739,-32.466],[1.872,-39.659],[18.663,-66.648],[20.801,-77.95],[22.517,-80.005],[22.835,-80.136],[27.289,-81.461],[31.102,-78.509]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.349019616842,0.352941185236,0.717647075653,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.616,-1.044],[1.533,-1.974],[1.286,-1.623],[6.929,-9.022],[1.247,-1.632],[2.828,-3.637],[2.12,0.05],[0.81,1.954],[-1.451,2.322],[0,0],[0,0],[0,0],[-0.087,0.021],[-1.551,-0.203],[-0.476,-1.63]],"o":[[-1.202,2.136],[-1.247,1.633],[-6.929,9.023],[-1.247,1.633],[-2.827,3.637],[-1.295,1.663],[-2.12,-0.051],[-1.039,-2.542],[0,0],[0,0],[0,0],[0.096,-0.059],[1.433,-0.686],[1.668,0.23],[0.335,1.185]],"v":[[30.518,-74.999],[25.568,-69.321],[21.78,-64.394],[1.001,-37.364],[-2.739,-32.466],[-11.192,-21.507],[-16.319,-19.069],[-21.251,-22.49],[-19.482,-30.149],[-13.782,-36.92],[20.801,-77.95],[22.517,-80.005],[22.835,-80.136],[27.289,-81.461],[31.102,-78.509]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.435294121504,0.43137255311,0.811764717102,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.223,-1.783],[1.401,-0.973],[0.633,-0.074],[0.839,0.483],[2.036,1.888],[0.135,1.276],[-0.087,0.367],[-0.554,0.664],[-1.368,0.41],[-2.037,-0.624],[-0.856,-1.67]],"o":[[-0.223,1.701],[-0.57,0.395],[-0.905,0.133],[-2.413,-1.386],[-0.893,-0.843],[-0.045,-0.398],[0.126,-0.867],[0.94,-1.123],[2.089,-0.607],[1.778,0.543],[0.799,1.575]],"v":[[40.591,-81.345],[38.203,-76.955],[36.368,-76.247],[33.694,-76.777],[26.995,-81.703],[24.703,-84.692],[24.78,-85.856],[25.867,-88.188],[29.494,-90.43],[35.653,-90.28],[39.711,-86.527]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[1.429,2.752],[0.635,0.767],[2.223,0.688],[3.651,-1.032],[1.641,-1.905],[0.238,-0.318],[0.212,-0.635],[0.053,-0.423],[-0.079,-0.714],[-0.026,-0.132],[-1.508,-1.376],[-4.207,-2.382],[-0.053,-0.026],[-1.614,0.212],[-1.032,0.688],[-0.529,2.593],[-0.053,0.318]],"o":[[-0.45,-0.847],[-1.455,-1.852],[-3.572,-1.085],[-2.408,0.688],[-0.238,0.291],[-0.371,0.582],[-0.132,0.397],[-0.158,0.662],[0.026,0.106],[0.45,1.985],[3.546,3.228],[0.053,0.026],[1.455,0.847],[1.085,-0.106],[2.17,-1.455],[0.053,-0.318],[0.37,-3.069]],"v":[[44.921,-88.183],[43.307,-90.617],[37.724,-94.666],[26.902,-94.983],[20.524,-91.173],[19.811,-90.247],[18.937,-88.421],[18.646,-87.177],[18.513,-85.14],[18.593,-84.743],[22.588,-79.98],[34.284,-71.539],[34.443,-71.46],[39.153,-70.507],[42.381,-71.724],[46.377,-78.287],[46.535,-79.239]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.882352948189,0.101960785687,0.090196080506,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":3,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":5,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.73,-4.162],[1.319,-0.549],[0,0],[-0.741,2.613],[5.617,3.993],[6.553,-2.223],[2.767,-2.339],[-0.028,0.117],[-0.698,1.394],[-0.943,1.212],[-2.819,1.343],[-4.486,-1.142],[-3.271,-2.987],[0.17,-5.578]],"o":[[-0.945,1.048],[0,0],[0.818,-2.594],[1.859,-6.654],[-5.665,-3.962],[-3.431,1.157],[0.027,-0.116],[0.25,-1.581],[0.68,-1.316],[1.942,-2.494],[4.204,-2],[4.283,1.135],[4.075,3.751],[-0.122,5.548]],"v":[[-12.57,2.891],[-15.836,5.605],[-15.808,5.489],[-12.828,-2.09],[-19.78,-20.215],[-39.603,-22.562],[-48.902,-17.216],[-48.859,-17.574],[-46.965,-21.596],[-44.672,-25.4],[-37.383,-31.263],[-23.791,-32.562],[-12.47,-25.99],[-5.035,-11.647]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.247058823705,0.243137255311,0.541176497936,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[3.73,-4.162],[1.319,-0.549],[0.221,-0.07],[1.978,1.001],[6.112,4.848],[-0.308,3.905],[-0.028,0.117],[-0.698,1.394],[-0.943,1.212],[-2.819,1.343],[-4.486,-1.142],[-3.271,-2.987],[0.17,-5.578]],"o":[[-0.945,1.048],[-0.183,0.08],[-2.112,0.608],[-6.938,-3.607],[-2.767,-2.17],[0.027,-0.116],[0.25,-1.581],[0.68,-1.316],[1.942,-2.494],[4.204,-2],[4.283,1.135],[4.075,3.751],[-0.122,5.548]],"v":[[-12.57,2.891],[-15.836,5.605],[-16.423,5.835],[-22.741,4.465],[-42.37,-8.25],[-48.902,-17.216],[-48.859,-17.574],[-46.965,-21.596],[-44.672,-25.4],[-37.383,-31.263],[-23.791,-32.562],[-12.47,-25.99],[-5.035,-11.647]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.435294121504,0.43137255311,0.811764717102,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":24,"s":[52.582,-128.199],"to":[-5.592,9.738],"ti":[0.109,-1.418]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":34,"s":[19.028,-69.769],"to":[-0.109,1.418],"ti":[1.324,-1.985]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":40.479,"s":[51.929,-119.688],"to":[-1.324,1.985],"ti":[-2.364,2.647]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":46.31,"s":[11.086,-57.857],"to":[2.364,-2.647],"ti":[0.473,-2.08]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":53.437,"s":[66.111,-135.572],"to":[-0.473,2.08],"ti":[0,0]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":59.915,"s":[8.25,-45.377],"to":[0,0],"ti":[-1.796,4.065]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":66.395,"s":[66.111,-135.572],"to":[1.796,-4.065],"ti":[2.255,-1.229]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":73.521,"s":[19.028,-69.769],"to":[-2.255,1.229],"ti":[-5.592,9.738]},{"t":84,"s":[52.582,-128.199]}],"ix":2,"x":"var $bm_rt;\nvar fx = effect('Kleaner');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"a":{"a":0,"k":[19.028,-69.769],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":11,"s":[0,0]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":17,"s":[100,100]},{"i":{"x":[0.667,0.667],"y":[1,1]},"o":{"x":[0.333,0.333],"y":[0,0]},"t":88,"s":[100,100]},{"t":94,"s":[0,0]}],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":11,"s":[52]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":17,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":88,"s":[0]},{"t":94,"s":[52]}],"ix":6,"x":"var $bm_rt;\nvar fx = effect('Kleaner');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":3,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0.031,-0.093],[0.496,-0.681],[3.592,-4.553],[3.375,-4.057],[1.704,-1.982],[1.797,-1.518],[0.216,3.593],[-2.447,3.748],[-6.009,5.606],[-4.181,1.796]],"o":[[0,0.093],[-0.217,0.836],[-3.375,4.739],[-3.283,4.15],[-1.673,2.044],[-1.487,1.827],[-2.261,1.889],[-0.341,-4.708],[4.491,-6.907],[3.375,-3.159],[0,0]],"v":[[69.998,-63.868],[69.967,-63.589],[68.728,-61.328],[58.26,-47.422],[48.287,-35.095],[43.238,-29.055],[38.499,-23.511],[32.058,-25.122],[37.199,-38.471],[52.995,-57.364],[64.206,-65.292]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.701960802078,0.35686275363,0.180392161012,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.05,-2.215]],"o":[[-0.874,2.035],[0,0]],"v":[[28.181,-24.81],[26.925,-28.546]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.701960802078,0.35686275363,0.180392161012,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3.074,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[-0.762,-4.68]],"o":[[3.678,2.993],[0,0]],"v":[[-36.485,-36.489],[-29.517,-24.444]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[0.701960802078,0.35686275363,0.180392161012,1],"ix":3},"o":{"a":0,"k":100,"ix":4},"w":{"a":0,"k":3.074,"ix":5},"lc":2,"lj":2,"bm":0,"nm":"Stroke 1","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":1,"k":[{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":41.774,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-0.247,2.664],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[-0.774,-2.416],[-0.743,-2.385],[-0.96,-0.65],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[0.743,-8.486],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[0.712,2.323],[0.34,1.115],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-35.833,-47.205],[-25.333,-69.412],[10.811,-73.965],[21.93,-64.023],[25.801,-57.147],[27.412,-49.961],[29.116,-47.019],[34.69,-52.563],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":45.014,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-0.247,2.664],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[1.144,-4.401],[-0.743,-2.385],[-0.96,-0.65],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[0.743,-8.486],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[-0.611,2.352],[0.34,1.115],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-33.564,-38.129],[-19.661,-51.827],[7.974,-56.947],[22.497,-50.976],[25.801,-42.965],[26.845,-43.721],[29.116,-47.019],[34.69,-52.563],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":54.732,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-0.247,2.664],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[1.144,-4.401],[-0.743,-2.385],[-0.96,-0.65],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[0.743,-8.486],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[-0.611,2.352],[0.34,1.115],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-33.564,-38.129],[-19.661,-51.827],[7.974,-56.947],[22.497,-50.976],[25.801,-42.965],[26.845,-43.721],[29.116,-47.019],[34.69,-52.563],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":57.324,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-2.674,0.071],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[1.144,-4.401],[-0.278,-2.483],[0.315,17.208],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[6.052,-0.161],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[-0.611,2.352],[0.72,6.427],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-31.295,-35.293],[-19.093,-43.885],[7.974,-56.947],[17.959,-40.765],[21.831,-29.351],[26.845,-26.136],[34.221,-36.808],[35.824,-41.785],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":69.634,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-2.674,0.071],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[1.144,-4.401],[-0.278,-2.483],[0.315,17.208],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[6.052,-0.161],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[-0.611,2.352],[0.72,6.427],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-31.295,-35.293],[-19.093,-43.885],[7.974,-56.947],[17.959,-40.765],[21.831,-29.351],[26.845,-26.136],[34.221,-36.808],[35.824,-41.785],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":71.577,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-2.674,0.071],[-7.533,-3.666],[-11.459,-6.102],[-10.301,0.773],[1.144,-4.401],[-0.278,-2.483],[0.315,17.208],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[6.052,-0.161],[9.166,4.46],[4.429,2.385],[2.502,-0.188],[-0.611,2.352],[0.72,6.427],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-31.295,-35.293],[-19.093,-43.885],[0.033,-35.958],[13.988,-36.227],[21.831,-29.351],[26.845,-26.136],[34.221,-36.808],[35.824,-41.785],[45.331,-50.229],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"i":{"x":0.667,"y":1},"o":{"x":0.333,"y":0},"t":101,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-2.674,0.071],[-7.533,-3.666],[-11.459,-6.102],[-10.301,0.773],[1.144,-4.401],[-0.278,-2.483],[0.315,17.208],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[6.052,-0.161],[9.166,4.46],[4.429,2.385],[2.502,-0.188],[-0.611,2.352],[0.72,6.427],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-31.295,-35.293],[-19.093,-43.885],[0.033,-35.958],[13.988,-36.227],[21.831,-29.351],[26.845,-26.136],[34.221,-36.808],[35.824,-41.785],[45.331,-50.229],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]},{"t":110,"s":[{"i":[[0.433,-3.469],[0.093,-0.526],[0.155,-0.743],[0.155,-0.557],[0.774,-1.672],[2.385,-2.54],[6.752,-2.54],[10.499,-0.991],[18.118,1.053],[15.331,10.128],[0.062,0.031],[2.416,2.199],[2.23,3.933],[0.248,0.527],[0.341,1.053],[0.031,0.093],[0.155,0.65],[0.155,1.332],[0.031,0.743],[-0.186,1.394],[-0.061,0.248],[-0.743,1.58],[-7.31,0.774],[-6.318,-3.902],[-1.022,-0.743],[-2.943,-2.787],[0.248,1.951],[-0.247,2.664],[-6.225,5.606],[-11.459,-6.102],[-2.912,-4.088],[-0.774,-2.416],[-0.743,-2.385],[-0.96,-0.65],[-1.208,1.549],[-2.973,2.013],[-7.062,-0.526],[-0.619,-0.093],[0,0],[-3.933,-7.123],[-0.619,-3.716]],"o":[[-0.062,0.526],[-0.124,0.743],[-0.123,0.588],[-0.465,1.765],[-1.549,3.221],[-4.894,5.327],[-9.911,3.748],[-18.088,1.765],[-18.088,-1.115],[-0.031,-0.031],[-2.694,-1.765],[-3.345,-2.911],[-0.278,-0.526],[-0.464,-0.991],[-0.031,-0.031],[-0.248,-0.588],[-0.341,-1.239],[-0.093,-0.712],[-0.062,-1.425],[0.031,-0.248],[0.31,-1.673],[3.191,-6.969],[7.309,-0.774],[1.053,0.65],[3.251,2.292],[1.394,1.332],[-0.341,-2.633],[0.743,-8.486],[9.756,-8.796],[4.429,2.385],[1.456,2.044],[0.712,2.323],[0.34,1.115],[2.477,1.765],[2.199,-2.818],[5.761,-3.964],[0.619,0.062],[0,0],[7.433,2.602],[1.797,3.252],[0.619,3.469]],"v":[[91.834,-27.6],[91.617,-26.051],[91.183,-23.852],[90.718,-22.149],[88.798,-17.007],[82.82,-8.366],[64.763,3.434],[33.699,9.226],[-20.657,11.673],[-71.977,-1.924],[-72.07,-1.986],[-79.844,-7.871],[-88.361,-18.06],[-89.198,-19.671],[-90.467,-22.737],[-90.529,-22.923],[-91.118,-24.812],[-91.892,-28.653],[-92.078,-30.883],[-91.892,-35.126],[-91.769,-35.838],[-90.22,-40.732],[-72.503,-52.842],[-51.473,-47.236],[-48.376,-45.192],[-39.147,-37.48],[-35.678,-39.214],[-35.833,-47.205],[-25.333,-69.412],[10.811,-73.965],[21.93,-64.023],[25.801,-57.147],[27.412,-49.961],[29.116,-47.019],[34.69,-52.563],[42.495,-59.872],[62.348,-65.509],[64.206,-65.292],[69.998,-63.868],[87.93,-48.692],[91.555,-38.099]],"c":true}]}],"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.760784327984,0.470588237047,0.309803932905,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":6,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.592,-2.25],[-0.081,-2.801],[1.65,-3.48],[2.209,-1.553],[2.159,-0.95],[4.508,-1.348],[11.279,-1.303],[10.469,0],[14.805,3.004],[8.672,5.296],[0,0],[0,0],[0,0],[-0.031,0.434],[-0.774,2.509],[-1.032,-1.042],[0.656,1.448],[-1.959,1.403],[-5.818,2.049],[-7.819,1.49],[-4.367,0.588],[-12.42,0],[-9.199,-0.991],[-1.022,-0.124],[-11.702,-3.843],[-3.579,-1.64],[-1.513,-0.889],[-0.964,-2.01]],"o":[[0.713,2.709],[0.112,3.85],[-1.153,2.432],[-1.932,1.358],[-4.308,1.896],[-10.888,3.257],[-10.402,1.201],[-18.367,0],[-15.115,-3.066],[0,0],[0,0],[0,0],[0.031,-0.496],[0.093,-2.571],[1.337,0.624],[-1.299,-0.926],[-0.89,-1.964],[5.054,-3.619],[7.483,-2.635],[3.995,-0.774],[10.933,-1.425],[10.066,0],[1.022,0.093],[12.217,1.429],[3.739,1.228],[1.594,0.73],[1.962,1.152],[1.007,2.098]],"v":[[89.744,-21.798],[90.944,-13.497],[88.889,-2.237],[83.79,3.94],[77.322,6.818],[64.055,11.628],[30.641,18.219],[-0.706,19.973],[-51.036,15.203],[-87.396,2.381],[-88.605,-2.977],[-90.959,-13.353],[-90.959,-13.569],[-90.897,-14.963],[-90.401,-22.675],[-85.866,-20.524],[-88.863,-24.25],[-88.592,-31.08],[-71.494,-39.145],[-48.465,-45.192],[-35.922,-47.205],[-0.706,-49.435],[28.283,-47.948],[31.35,-47.577],[67.475,-40.017],[78.482,-35.754],[83.212,-33.391],[87.34,-28.341]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.937254905701,0.623529434204,0.152941182256,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":94,"s":[0]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":102,"s":[-7]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":109,"s":[7]},{"t":116,"s":[0]}],"ix":6,"x":"var $bm_rt;\nvar fx = effect('≈ùlosilo pli pura');\nvar doAnticipation = fx(1).value;\nvar doInterpolation = fx(2).value;\nvar doFollowThrough = fx(3).value;\nvar damping = $bm_div(fx(15).value, 10);\nvar elasticity = $bm_div(fx(13).value, 10);\nvar bounce = fx(17).value;\nvar anticipationDuration = fx(5).value;\nvar anticipationQuantity = $bm_div(fx(6).value, 100);\nvar slowIn = $bm_div(fx(9).value, 100);\nvar slowOut = $bm_div(fx(10).value, 100);\nvar spatialMode = fx(21).value;\nvar spatialDoInterpolation = fx(20).value;\nvar moBlurPrecision = fx(32).value;\nvar elasticityRandom = fx(14).value;\nvar dampingRandom = fx(16).value;\nvar softBody = fx(28).value;\nvar flexibility = $bm_div(fx(29).value, 100);\nvar doOverlap = fx(23).value;\nvar overlapDuration = fx(24).value;\nvar overlapRandom = fx(25).value;\nvar threshold = $bm_div($bm_div(1, moBlurPrecision), 1000);\nvar zeroValue;\nif ($bm_isInstanceOfArray(value)) {\n    if (value.length == 2)\n        zeroValue = [\n            0,\n            0\n        ];\n    else if (value.length == 3)\n        zeroValue = [\n            0,\n            0,\n            0\n        ];\n    else if (value.length == 4)\n        zeroValue = [\n            0,\n            0,\n            0,\n            0\n        ];\n} else\n    zeroValue = 0;\nvar isThisSpatial = isSpatial(thisProperty);\nvar isThisPosition = thisProperty === $bm_transform.position;\nvar simulate = false;\nif (isThisSpatial) {\n    doInterpolation = doInterpolation && spatialDoInterpolation;\n    if (isThisPosition && thisProperty.numKeys > 0) {\n        doOverlap = false;\n        simulate = false;\n    } else {\n        simulate = spatialMode == 2;\n        doOverlap = overlapDuration != 0 && doOverlap && simulate;\n    }\n} else {\n    doOverlap = false;\n}\nif (!doOverlap) {\n    overlapDuration = 0;\n}\nif (simulate && softBody && isThisSpatial && !isThisPosition && (doFollowThrough || doOverlap)) {\n    var distanceRatio = $bm_div(length(valueAtTime(0), $bm_transform.anchorPoint), $bm_div(thisLayer.width, 2));\n    distanceRatio = $bm_div($bm_sum(1, $bm_mul(distanceRatio, flexibility)), 2);\n    if (doFollowThrough) {\n        elasticity = $bm_div(elasticity, distanceRatio);\n        damping = $bm_div(damping, distanceRatio);\n    }\n    if (doOverlap) {\n        overlapDuration = $bm_mul(overlapDuration, distanceRatio);\n    }\n}\nseedRandom(0, true);\nif (doFollowThrough) {\n    if (elasticityRandom > 0)\n        elasticity = addNoise(elasticity, elasticityRandom);\n    if (dampingRandom > 0)\n        damping = addNoise(damping, dampingRandom);\n}\nif (doOverlap) {\n    if (doOverlap && overlapRandom > 0)\n        overlapDuration = addNoise(overlapDuration, overlapRandom);\n}\nvar result = value;\nfunction isSpatial(prop) {\n    if (!(prop.value instanceof Array))\n        return false;\n    if (prop.value.length != 2 && prop.value.length != 3)\n        return false;\n    try {\n        if (typeof prop.speed !== 'undefined')\n            return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction addNoise(val, quantity) {\n    var randomValue = random(0.9, 1.1);\n    var noiseValue = noise($bm_mul(valueAtTime(0), randomValue));\n    noiseValue = $bm_mul(noiseValue, $bm_div(quantity, 100));\n    return $bm_mul(val, $bm_sum(noiseValue, 1));\n}\nfunction isAfterLastKey() {\n    if (numKeys == 0)\n        return false;\n    var nKey = nearestKey(time);\n    return nKey.time <= time && nKey.index == numKeys;\n}\nfunction isStill(t, threshold) {\n    var d = $bm_sub(valueAtTime(t), valueAtTime($bm_sum(t, framesToTime(1))));\n    if ($bm_isInstanceOfArray(d)) {\n        for (var i = 0; i < d.length; i++) {\n            d[i] = Math.abs(d[i]);\n            if (d[i] >= threshold) {\n                return false;\n            }\n        }\n        return true;\n    } else {\n        d = Math.abs(d);\n        return d < threshold;\n    }\n}\nfunction bezierInterpolation(t, tMin, tMax, value1, value2, bezierPoints) {\n    if (arguments.length !== 5 && arguments.length !== 6)\n        return t;\n    var a = $bm_sub(value2, value1);\n    var b = $bm_sub(tMax, tMin);\n    if (b == 0)\n        return t;\n    var c = clamp($bm_div($bm_sub(t, tMin), b), 0, 1);\n    if (!(bezierPoints instanceof Array) || bezierPoints.length !== 4)\n        bezierPoints = [\n            0.33,\n            0,\n            0.66,\n            1\n        ];\n    return $bm_sum($bm_mul(a, h(c, bezierPoints)), value1);\n    function h(f, g) {\n        var x = $bm_mul(3, g[0]);\n        var j = $bm_sub($bm_mul(3, $bm_sub(g[2], g[0])), x);\n        var k = $bm_sub($bm_sub(1, x), j);\n        var l = $bm_mul(3, g[1]);\n        var m = $bm_sub($bm_mul(3, $bm_sub(g[3], g[1])), l);\n        var n = $bm_sub($bm_sub(1, l), m);\n        var d = f;\n        for (var i = 0; i < 5; i++) {\n            var z = $bm_sub($bm_mul(d, $bm_sum(x, $bm_mul(d, $bm_sum(j, $bm_mul(d, k))))), f);\n            if (Math.abs(z) < 0.001)\n                break;\n            d = $bm_sub(d, $bm_div(z, $bm_sum(x, $bm_mul(d, $bm_sum($bm_mul(2, j), $bm_mul($bm_mul(3, k), d))))));\n        }\n        return $bm_mul(d, $bm_sum(l, $bm_mul(d, $bm_sum(m, $bm_mul(d, n)))));\n    }\n}\nfunction getPropWorldSpeed(t, prop) {\n    return length(getPropWorldVelocity(t, prop));\n}\nfunction getPrevKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time <= t)\n        return nKey;\n    if (nKey.index > 1)\n        return key($bm_sub(nKey.index, 1));\n    return null;\n}\nfunction getNextKey(t) {\n    if (numKeys == 0)\n        return null;\n    var nKey = nearestKey(t);\n    if (nKey.time >= t)\n        return nKey;\n    if (nKey.index < numKeys)\n        return key($bm_sum(nKey.index, 1));\n    return null;\n}\nfunction getPropWorldVelocity(t, prop) {\n    return $bm_mul($bm_sub(getPropWorldValue($bm_sum(t, 0.005), prop), getPropWorldValue($bm_sub(t, 0.005), prop)), 100);\n}\nfunction getLayerWorldPos(t, l) {\n    return l.toWorld(l.anchorPoint, t);\n}\nfunction getPropWorldValue(t, prop) {\n    if (isPosition(prop))\n        return getLayerWorldPos(t, thisLayer);\n    return thisLayer.toWorld(prop.valueAtTime(t), t);\n}\nfunction isPosition(prop) {\n    return prop === $bm_transform.position;\n}\nfunction isKeyTop(k, axis) {\n    var prevSpeed = velocityAtTime($bm_sub(k.time, threshold));\n    var nextSpeed = velocityAtTime($bm_sum(k.time, threshold));\n    if ($bm_isInstanceOfArray(value)) {\n        prevSpeed = prevSpeed[axis];\n        nextSpeed = nextSpeed[axis];\n    }\n    if (Math.abs(prevSpeed) < 0.01 || Math.abs(nextSpeed) < 0.01)\n        return true;\n    return $bm_mul(prevSpeed, nextSpeed) < 0;\n}\nfunction anticipate() {\n    var anticipation = zeroValue;\n    if (isAfterLastKey())\n        return anticipation;\n    if (numKeys < 2)\n        return anticipation;\n    var nextKey = getNextKey(time);\n    var aKey = nextKey;\n    if (!isStill(aKey.time - 0.1, 0.1)) {\n        aKey = getPrevKey(time);\n        if (!isStill(aKey.time - 0.1, 0.1))\n            return anticipation;\n    }\n    if (aKey.index == numKeys)\n        return anticipation;\n    var anticipationMiddle = aKey.time;\n    var anticipationStart = $bm_sub(anticipationMiddle, anticipationDuration);\n    var anticipationEnd = key(aKey.index + 1).time;\n    var startValue = anticipation;\n    var midValue = $bm_mul($bm_sum($bm_neg(valueAtTime($bm_sum(anticipationMiddle, anticipationDuration))), aKey.value), anticipationQuantity);\n    var endValue = anticipation;\n    if (time < anticipationStart) {\n        return anticipation;\n    } else if (time < anticipationMiddle) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue[i], midValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationStart, anticipationMiddle, startValue, midValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else if (time <= anticipationEnd) {\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < value.length; i++) {\n                anticipation[i] = bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue[i], endValue[i], [\n                    slowOut,\n                    0,\n                    slowIn,\n                    1\n                ]);\n            }\n            return anticipation;\n        } else {\n            return bezierInterpolation(time, anticipationMiddle, anticipationEnd, midValue, endValue, [\n                slowOut,\n                0,\n                slowIn,\n                1\n            ]);\n        }\n    } else {\n        return anticipation;\n    }\n}\nfunction followThroughAtTime(t) {\n    var fThrough = zeroValue;\n    if (elasticity == 0)\n        return fThrough;\n    var propSpeed;\n    if (!simulate) {\n        if (numKeys < 2)\n            return fThrough;\n        if (nearestKey(t).index == 1)\n            return fThrough;\n        propSpeed = length(velocityAtTime(t));\n        if (propSpeed >= threshold)\n            return fThrough;\n    } else {\n        propSpeed = getPropWorldSpeed(t, thisProperty);\n        if (propSpeed >= threshold)\n            return fThrough;\n    }\n    var fThroughStart = 0;\n    var fThroughTime = 0;\n    if (simulate) {\n        var speedI = getPropWorldSpeed(t, thisProperty);\n        var i = t;\n        while (speedI < threshold && i > 0) {\n            i = $bm_sub(i, $bm_div(thisComp.frameDuration, moBlurPrecision));\n            speedI = getPropWorldSpeed(i, thisProperty);\n        }\n        fThroughStart = i;\n    } else {\n        var fThroughKey = getPrevKey(t);\n        fThroughStart = fThroughKey.time;\n    }\n    if (fThroughStart == 0)\n        return fThrough;\n    fThroughTime = $bm_sub(t, fThroughStart);\n    if (simulate)\n        fThrough = $bm_div(getPropWorldVelocity($bm_sub(fThroughStart, thisComp.frameDuration), thisProperty), 2);\n    else\n        fThrough = $bm_div(velocityAtTime($bm_sub(fThroughStart, thisComp.frameDuration)), 2);\n    if (bounce) {\n        var cycleDamp = Math.exp($bm_mul($bm_mul(fThroughTime, damping), 0.1));\n        var damp = $bm_div(Math.exp($bm_mul(fThroughTime, damping)), $bm_div(elasticity, 2));\n        var cycleDuration = $bm_div(1, $bm_mul(elasticity, 2));\n        cycleDuration = Math.round(timeToFrames(cycleDuration));\n        cycleDuration = framesToTime(cycleDuration);\n        var midDuration = $bm_div(cycleDuration, 2);\n        var maxValue = $bm_mul(fThrough, midDuration);\n        var cycvarime = fThroughTime;\n        var numEndCycles = 1;\n        while (cycvarime > cycleDuration) {\n            cycvarime = $bm_sub(cycvarime, cycleDuration);\n            cycleDuration = $bm_div(cycleDuration, cycleDamp);\n            cycleDuration = Math.round(timeToFrames(cycleDuration));\n            if (cycleDuration < 2) {\n                cycleDuration = 2;\n                numEndCycles++;\n            }\n            cycleDuration = framesToTime(cycleDuration);\n            midDuration = $bm_div(cycleDuration, 2);\n            maxValue = $bm_div($bm_mul(fThrough, midDuration), damp);\n            if (numEndCycles > 100 / damping && maxValue < threshold)\n                return zeroValue;\n        }\n        if (cycvarime < midDuration)\n            fThrough = bezierInterpolation(cycvarime, 0, midDuration, 0, maxValue, [\n                0,\n                0.1,\n                slowIn,\n                1\n            ]);\n        else\n            fThrough = bezierInterpolation(cycvarime, midDuration, cycleDuration, maxValue, 0, [\n                $bm_sub(1, slowIn),\n                0,\n                1,\n                0.9\n            ]);\n    } else {\n        var damp = Math.exp($bm_mul(fThroughTime, damping));\n        var sinus = $bm_mul($bm_mul($bm_mul(elasticity, fThroughTime), 2), Math.PI);\n        sinus = Math.sin(sinus);\n        sinus = $bm_mul($bm_div(0.3, elasticity), sinus);\n        sinus = $bm_div(sinus, damp);\n        if (Math.abs(sinus) < $bm_div(threshold, 100))\n            return 0;\n        fThrough = $bm_mul(fThrough, sinus);\n        if (threshold > 0) {\n            fThrough = $bm_mul(fThrough, $bm_sub(1, $bm_div(propSpeed, threshold)));\n        }\n    }\n    if (bounce) {\n        var prevValue = valueAtTime($bm_sub(fThroughStart, thisComp.frameDuration));\n        var startValue = valueAtTime(fThroughStart);\n        if ($bm_isInstanceOfArray(value)) {\n            for (var i = 0; i < prevValue.length; i++) {\n                if (prevValue[i] > startValue[i])\n                    fThrough[i] = Math.abs(fThrough[i]);\n                if (prevValue[i] < startValue[i])\n                    fThrough[i] = $bm_neg(Math.abs(fThrough[i]));\n            }\n        } else {\n            if (prevValue > startValue)\n                fThrough = Math.abs(fThrough);\n            if (prevValue < startValue)\n                fThrough = $bm_neg(Math.abs(fThrough));\n        }\n    }\n    if (simulate) {\n        if (!isThisPosition) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer));\n            fThrough = $bm_sub(thisLayer.fromWorld(fThrough), thisLayer.anchorPoint);\n        } else if (thisLayer.hasParent) {\n            fThrough = $bm_sum(fThrough, getLayerWorldPos(time, thisLayer.parent));\n            fThrough = $bm_sub(thisLayer.parent.fromWorld(fThrough), thisLayer.parent.anchorPoint);\n        }\n    }\n    return fThrough;\n}\nfunction followThrough() {\n    var propSpeed = length(velocity);\n    if (propSpeed < threshold)\n        return followThroughAtTime($bm_sub(time, overlapDuration));\n    var fThrough = zeroValue;\n    var t = time;\n    while (t > 0) {\n        t = $bm_sub(t, thisComp.frameDuration);\n        if (simulate)\n            propSpeed = getPropWorldSpeed($bm_sub(t, overlapDuration), thisProperty);\n        else\n            propSpeed = length(velocityAtTime(t));\n        if (propSpeed < threshold) {\n            fThrough = followThroughAtTime($bm_sub(t, overlapDuration));\n            break;\n        }\n    }\n    return linear(time, t, $bm_sum(t, $bm_mul(anticipationDuration, 2)), fThrough, zeroValue);\n}\nfunction smartSmooth(axis) {\n    var startKey = nearestKey(time);\n    var endKey = startKey;\n    if (time == startKey.time)\n        return 0;\n    if (time < startKey.time && startKey.index == 1)\n        return 0;\n    if (time > startKey.time && startKey.index == numKeys)\n        return 0;\n    if (time < startKey.time)\n        startKey = key($bm_sub(startKey.index, 1));\n    if (time > startKey.time)\n        endKey = key($bm_sum(startKey.index, 1));\n    var sI = 0.66;\n    var sO = 0.33;\n    var sIV = 1;\n    var sOV = 0;\n    var sVal = startKey.value;\n    var eVal = endKey.value;\n    if ($bm_isInstanceOfArray(value)) {\n        sVal = sVal[axis];\n        eVal = eVal[axis];\n    }\n    var sTime = startKey.time;\n    var eTime = endKey.time;\n    if (isKeyTop(startKey, axis))\n        sO = slowOut;\n    else {\n        var prevKey = key($bm_sub(startKey.index, 1));\n        var pVal = prevKey.value;\n        if ($bm_isInstanceOfArray(value))\n            pVal = pVal[axis];\n        sOV = $bm_div($bm_sub(sVal, pVal), $bm_sub(eVal, pVal));\n    }\n    if (isKeyTop(endKey, axis)) {\n        sI = slowIn;\n        if (endKey.index != numKeys) {\n            var nextKey = key($bm_sum(endKey.index, 1));\n            var nVal = nextKey.value;\n            if ($bm_isInstanceOfArray(value))\n                nVal = nVal[axis];\n            if (Math.abs(nVal - eVal) < 0.01 && doFollowThrough)\n                sI = 1;\n        }\n    } else {\n        var nextKey = key($bm_sum(endKey.index, 1));\n        var nVal = nextKey.value;\n        if ($bm_isInstanceOfArray(value))\n            nVal = nVal[axis];\n        sIV = $bm_div($bm_sub(eVal, sVal), $bm_sub(nVal, sVal));\n    }\n    if (endKey.index == numKeys && doFollowThrough) {\n        sI = 1;\n    }\n    var val = value;\n    if ($bm_isInstanceOfArray(value))\n        val = val[axis];\n    return $bm_sub(bezierInterpolation(time, sTime, eTime, sVal, eVal, [\n        sO,\n        sOV,\n        sI,\n        sIV\n    ]), val);\n}\nfunction overlap() {\n    var ol = zeroValue;\n    if (isThisPosition && !hasParent)\n        return zeroValue;\n    ol = $bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisProperty), getPropWorldValue(time, thisProperty));\n    var motionRatio = $bm_div($bm_div(length(zeroValue, ol), thisLayer.width), 2);\n    if (isThisPosition) {\n        var originalDistance = length(valueAtTime(0));\n        motionRatio = $bm_div(length(zeroValue, ol), thisComp.width);\n    }\n    ol = $bm_sum(ol, getPropWorldValue(time, thisProperty));\n    ol = $bm_sum(ol, $bm_mul($bm_mul($bm_sub(getPropWorldValue($bm_sub(time, overlapDuration), thisLayer.anchorPoint), ol), motionRatio), flexibility));\n    ol = thisLayer.fromWorld(ol);\n    if (!isThisPosition)\n        ol = $bm_sub(ol, value);\n    else {\n        ol = linear(flexibility, 0, 100, $bm_div(ol, 2), 0);\n        var prevParentWorldPos = getLayerWorldPos($bm_sub(time, overlapDuration), parent);\n        ol = $bm_sum(ol, $bm_mul($bm_mul($bm_mul(thisLayer.fromWorld(prevParentWorldPos), motionRatio), flexibility), 5));\n    }\n    return ol;\n}\nvar okToGo = false;\nif (simulate && fx.enabled)\n    okToGo = true;\nelse if (numKeys > 1 && fx.enabled)\n    okToGo = true;\nif (okToGo) {\n    var smartSmoothResult = zeroValue;\n    if (doInterpolation) {\n        if ($bm_isInstanceOfArray(value)) {\n            if (value.length == 2)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1)\n                ];\n            else if (value.length == 3)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2)\n                ];\n            else if (value.length == 4)\n                smartSmoothResult = [\n                    smartSmooth(0),\n                    smartSmooth(1),\n                    smartSmooth(2),\n                    smartSmooth(3)\n                ];\n        } else {\n            smartSmoothResult = smartSmooth(0);\n        }\n    }\n    if (doAnticipation)\n        result = $bm_sum(result, anticipate());\n    result = $bm_sum(result, smartSmoothResult);\n    if (doFollowThrough)\n        result = $bm_sum(result, followThrough());\n    if (doOverlap)\n        result = $bm_sum(result, overlap());\n}\n$bm_rt = result;"},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":4,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0.61]],"o":[[0,-0.61],[0,0]],"v":[[0,100],[0,98.169]],"c":false},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":1,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[-0.401,-0.957],[0.461,-0.559],[1.968,-1.149],[4.949,-2.025],[10.52,-1.539],[18.688,3.339],[6.516,3.007],[3.646,4.429],[-1.091,1.052],[-1.257,0.329],[-0.952,0.435],[-7.041,0.914],[-10.752,0],[-3.654,-5.499],[-7,0],[-1.055,-0.028]],"o":[[0.118,0.281],[-1.454,1.761],[-4.608,2.69],[-9.822,4.019],[-18.787,2.749],[-7.085,-1.266],[-5.219,-2.409],[-0.787,-0.956],[1.13,-1.09],[0.965,-0.252],[6.504,-2.97],[10.664,-1.385],[29.516,0],[4.832,-1.003],[1.056,0],[1.193,0.032]],"v":[[76.914,63.773],[76.456,65.011],[69.965,69.209],[55.598,76.277],[24.898,84.562],[-31.808,82.992],[-52.495,77.094],[-66.301,66.895],[-66.804,63.975],[-62.992,63.512],[-59.948,61.775],[-38.824,56.851],[-6.62,54.957],[50.864,64.74],[69.076,63.13],[72.242,63.173]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.309803932905,0.623529434204,0.352941185236,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-2.323],[32.025,0],[2.478,0.062],[14.588,0],[1.982,2.571],[4.088,0],[0,6.318],[-5.637,1.765],[0,2.137],[-14.588,0.155],[0,0],[-1.58,-0.062],[-1.549,-0.124],[-27.348,0],[-3.654,-5.606],[-7,0],[-2.694,-0.186],[-2.416,-0.465],[0,-2.075],[6.101,-1.177]],"o":[[0,6.318],[-2.601,0],[-2.323,2.509],[-14.867,0],[-3.841,0.155],[-32.056,0],[0,-2.23],[-6.814,-1.177],[0,-3.5],[0,0],[1.673,0],[1.673,0.093],[6.132,-4.986],[29.516,0],[4.832,-1.022],[3.035,0],[3.004,0.248],[6.411,1.177],[0,2.013],[6.039,1.796]],"v":[[97.809,79.067],[39.798,90.496],[32.179,90.372],[3.19,94.801],[-25.923,90.248],[-37.848,90.496],[-95.889,79.067],[-86.969,72.997],[-98.212,67.794],[-72.041,61.321],[-70.864,61.321],[-66.001,61.413],[-61.169,61.723],[-4.832,52.989],[52.652,62.962],[70.864,61.321],[79.505,61.63],[87.682,62.683],[98.212,67.794],[88.208,72.78]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.572549045086,0.89411765337,0.501960813999,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 2","np":2,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":2,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":143.311644978312,"st":0,"bm":0}],"markers":[]}